* Org mode enhancement


** Github Flavored Markdown
   #+begin_src emacs-lisp
     (use-package ox-gfm
       :defer t
       :ensure t
       :config
       (progn
         (eval-after-load "org"
           '(require 'ox-gfm nil t))))
   #+end_src

** Capture screenshot within Emacs
   #+begin_src emacs-lisp
     (use-package org-attach-screenshot
       :commands (org-mode)
       :ensure t
       :config
       (progn
         (setq org-attach-screenshot-dirfunction
               (lambda () 
                 (progn (assert (buffer-file-name))
                        (concat (file-name-sans-extension (buffer-file-name))
                                "_att")))
               org-attach-screenshot-relative-links t)))

     (defun zw/org-screenshot ()
       "Take a screenshot into a time stamped unique-named file in the
     same directory as the org-buffer and insert a link to this file."
       (interactive)
       (setq filename
             (concat
              (make-temp-name
               (concat (file-name-directory buffer-file-name)
                       "_"
                       (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
       (shell-command "snippingtool /clip")
       (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('" filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
       (insert (concat "[[file:" filename "]]"))
       (org-display-inline-images))

     ;; (global-set-key "\C-cs" 'zw/org-screenshot)
     (if (string-equal system-type "windows-nt")
         (define-key org-mode-map (kbd "\C-c s") 'zw/org-screenshot)
       (define-key org-mode-map (kbd "\C-c s") 'org-attach-screenshot))
   #+end_src

** Org-download moving images from A to B
   #+begin_src emacs-lisp
     (use-package org-download
       :commands (org-mode)
       :ensure t
       :config
       (progn
         (add-hook 'dired-mode-hook 'org-download-enable)))
   #+end_src

   #+RESULTS:
   : t


* Markdown 
  - sudo apt install pandoc
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC

  #+RESULTS:

* JSON-mode
  #+begin_src emacs-lisp
    (use-package json-mode
      :defer t
      :ensure t
      :config
      (progn
        (add-hook 'json-mode-hook
                  #'(lambda ()
                      (remove-hook 'before-save-hook #'clang-format-buffer-smart 'local)))))
  #+end_src
* Docker
  #+begin_src emacs-lisp
    ;; reference usage from http://manuel-uberti.github.io/emacs/2017/10/19/docker/
    (use-package dockerfile-mode
      :defer t
      :ensure t
      :init 
      (setq dockerfile-mode-command "docker"))
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))

    (use-package docker-compose-mode
      :after (dockerfile-mode)
      :defer t
      :ensure t)

    (use-package docker-tramp
      ;; C-x C-f /docker:user@container:/path/to/file, where:
      ;; user is the user that you want to use
      ;; container is the id or name of the container 
      :defer t
      :ensure t
      :after (dockerfile-mode))

    (use-package eshell-bookmark
      :defer t 
      :after eshell
      :config 
      (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
  #+end_src

  #+RESULTS:

* PDF 
  * Use [[https://github.com/politza/pdf-tools][pdf-tools]], read the documentation to install dependencies according to your system.
  * Dependencies on Ubuntu
    #+begin_src sh
      sudo apt install autoconf automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config
    #+end_src
  * Configuration 
  #+begin_src emacs-lisp
    ;; (unless (string-equal system-type "windows-nt")
    ;;   ;; Haven't build pdf-tool dependencies on other system
    ;;   (use-package pdf-tools
    ;;     ;; :pin manual
    ;;     :init
    ;;     (use-package tablist
    ;;       :ensure t)
    ;;     :ensure t
    ;;     :config
    ;;     ;; initialise
    ;;     (pdf-tools-install)
    ;;     ;; PDF Tools does not work well together with linum-mode
    ;;     (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
    ;;     ;; more fine-grained zooming
    ;;     ;; (setq pdf-view-resize-factor 1.1)
    ;;     ;; open pdfs scaled to fit page
    ;;     (setq-default pdf-view-display-size 'fit-width)
    ;;     ;; automatically annotate highlights
    ;;     (setq pdf-annot-activate-created-annotations t)

    ;;     ;; use normal isearch
    ;;     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

    ;;   (use-package org-pdfview
    ;;     :ensure t))
  #+end_src

  #+RESULTS:

  * If meet error: "dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.4.dylib Referenced from: /usr/local/bin/gawk" during the compliation of pdf-tools.
    Solution: ~brew upgrade gawk~

* highlight-symbol
  # #+begin_src emacs-lisp
  #   (use-package idle-highlight-mode
  #     :defer 2
  #     :ensure t
  #     :init 
  #     (define-globalized-minor-mode my-global-idle-highlight-mode idle-highlight-mode
  #       (lambda ()
  #         (idle-highlight-mode 1)))
  #     (my-global-idle-highlight-mode 1))
  # #+end_src
* Folding
  * [[https://github.com/gregsexton/origami.el][Origami]]
  * [[https://github.com/zenozeng/yafolding.el][yafolding ]]
  * [[https://github.com/mrkkrp/vimish-fold][vimish-fold]]
  #+begin_src emacs-lisp
    (use-package yafolding
      :defer t
      :init (global-set-key (kbd "<f9>") 'yafolding-toggle-element)
      :commands (yafolding-toggle-element)
      :ensure t)
  #+end_src

  #+RESULTS:
  : t

* Indentation
** indent guide
*** Refs   
    * [[https://github.com/antonj/Highlight-Indentation-for-Emacs][Highlight-Indentation-for-Emacs]]
    * [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]
    * [[https://github.com/zk-phi/indent-guide][indent-guide]]
*** highlight-indent-guides
    #+begin_src emacs-lisp
      (use-package highlight-indent-guides
        :ensure t
        :config 
        (progn
          (setq highlight-indent-guides-delay 0.1)
          ;; (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
          ;; (add-hook 'plantuml-mode-hook 'highlight-indent-guides-mode)
          (add-hook 'json-mode-hook 'highlight-indent-guides-mode)
          (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)))
    #+end_src

*** indent-guide
    #+begin_src emacs-lisp
      ;; (use-package indent-guide
      ;;   :ensure t
      ;;   :config
      ;;   (progn
      ;;     (setq indent-guide-delay 0.1)
      ;;     (add-hook 'prog-mode-hook 'indent-guide-mode)))
    #+end_src

** indentation using tab/space
   #+begin_src emacs-lisp
     ;; START TABS CONFIG
     ;; Create a variable for our preferred tab width
     (setq custom-indent-width 2)

     ;; Two callable functions for enabling/disabling tabs in Emacs
     (defun disable-tabs () 
       (progn
         (setq-default indent-tabs-mode nil)
         (setq indent-tabs-mode nil)))

     (defun enable-tabs  ()
       (progn
         ;; (local-set-key (kbd "TAB") 'tab-to-tab-stop)
         (setq-default tab-width custom-indent-width)
         (setq tab-width custom-indent-width)
         (setq indent-tabs-mode t)))

     (add-hook 'after-init-hook '(lambda ()
                                   ;; Hooks to Enable Tabs
                                   ;; (add-hook 'prog-mode-hook 'enable-tabs)
                                   ;; (add-hook 'org-mode-hook 'enable-tabs)
                                   (add-hook 'plantuml-mode-hook '(lambda ()
                                                                    ;; plantuml seems always use tabs to do indent format
                                                                    (enable-tabs)
                                                                    (setq plantuml-indent-level custom-indent-width)))

                                   ;; Hooks to Disable Tabs, since tab usually cause inconsistent visual appearence
                                   (add-hook 'prog-mode-hook 'disable-tabs)
                                   (add-hook 'org-mode-hook 'disable-tabs)
                                   (add-hook 'json-mode-hook 'disable-tabs)
                                   (add-hook 'lisp-mode-hook 'disable-tabs)
                                   (add-hook 'emacs-lisp-mode-hook 'disable-tabs)
                                   (add-hook 'yaml-mode-hook 'disable-tabs)

                                   ;; Language-Specific Tweaks
                                   (add-hook 'python-mode-hook '(lambda ()
                                                                  (setq-default python-indent-offset custom-indent-width)
                                                                  (setq python-indent-offset custom-indent-width)))))

     ;; (setq-default js-indent-level custom-indent-width)      ;; Javascript

     ;; Making electric-indent behave sanely
     (setq-default electric-indent-inhibit nil)

     ;; Make the backspace properly erase the tab instead of
     ;; removing 1 space at a time.
     (setq backward-delete-char-untabify-method 'hungry)

     ;; ;; WARNING: This will change your life
     ;; ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
     ;; ;; This will also show trailing characters as they are useful to spot.
     ;; (setq whitespace-style '(face tabs tab-mark trailing))
     ;; (custom-set-faces
     ;;  '(whitespace-tab ((t (:foreground "#636363")))))
     ;; (setq whitespace-display-mappings
     ;;   '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
     ;; (global-whitespace-mode) ; Enable whitespace mode everywhere

     ;; END TABS CONFIG
   #+end_src

   #+RESULTS:
   : hungry

* Lookup word definition
  * Ref: (see [[https://oremacs.com/2015/05/22/define-word/][New on MELPA - define word at point]])
  
* Hydra
  #+begin_src emacs-lisp
    (use-package hydra
      :ensure t
      :defer t)
  #+end_src

* Unpackaged
A collection of useful Emacs Lisp code that isn’t substantial enough to be packaged. This code will be maintained here so that it can be updated and improved over time.

** Mark current package for upgrading
   #+begin_src emacs-lisp
      (use-package package
        :bind (:map package-menu-mode-map
                    ("t" . #'package-menu-upgrade-package))
        :config
        (defun package-menu-upgrade-package ()
          "Mark current package for upgrading (i.e. also mark obsolete version for deletion.)"
          (interactive)
          (when-let ((upgrades (package-menu--find-upgrades))
                     (description (tabulated-list-get-id))
                     (name (package-desc-name description))
                     (upgradable (cdr (assq name upgrades))))
            ;; Package is upgradable
            (save-excursion
              (goto-char (point-min))
              (while (not (eobp))
                (let* ((current-description (tabulated-list-get-id))
                       (current-name (package-desc-name current-description)))
                  (when (equal current-name name)
                    (cond ((equal description current-description)
                           (package-menu-mark-install)
                           (forward-line -1))
                          (t (package-menu-mark-delete)))))
                (forward-line 1))))))
   #+end_src

** Smerge with hydra 
   #+begin_src emacs-lisp
     (use-package smerge-mode
       :after hydra
       :init 
       (setq smerge-command-prefix "\C-cv")
       :config
       (defhydra unpackaged/smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (unpackaged/smerge-hydra/body)))))
     (defun magit-hydra/zw ()
       (interactive)
       (unpackaged/smerge-hydra/body))
   #+end_src
   - You can manually activate the hydra with the command ~unpackaged/smerge-hydra/body~.
* Sudo-edit
  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t
      :defer 1)
  #+end_src
* Nyan
  #+begin_src emacs-lisp
    (use-package nyan-mode
      :ensure t
      :config
      (nyan-mode 1)
      (setq nyan-cat-face-number 3))
  #+end_src

  #+RESULTS:
  : t

* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-items '((recents . 10)
                              (projects . 5))))
  #+end_src

* Latex
** setup
    #+begin_src emacs-lisp
      (use-package auctex
        :ensure t
        :defer t
        :mode ("\\.tex\\'" . LaTex-mode)
        :bind (:map LaTeX-mode-map
                    ("M-<delete>" . TeX-remove-macro)
                    ("C-c C-r" . reftex-query-replace-document)
                    ("C-c C-g" . reftex-grep-document))
        :init
        ;; define texbin execution path based on system
        (cond ((eq system-type 'darwin)
               (setq exec-path (append exec-path '("/Library/TeX/texbin/")))))
        ;; A function to delete the current macro in AUCTeX.
        ;; Note: keybinds won't be added to TeX-mode-hook if not kept at the end of the AUCTeX setup!
        (defun TeX-remove-macro ()
          "Remove current macro and return TRUE, If no macro at point, return Nil."
          (interactive)
          (when (TeX-current-macro)
            (let ((bounds (TeX-find-macro-boundaries))
                  (brace  (save-excursion
                            (goto-char (1- (TeX-find-macro-end)))
                            (TeX-find-opening-brace))))
              (delete-region (1- (cdr bounds)) (cdr bounds))
              (delete-region (car bounds) (1+ brace)))
            t))
        :config
        (setq-default TeX-master nil ; by each new fie AUCTEX will ask for a master fie.
                      TeX-PDF-mode t
                      TeX-engine 'xetex)     ; optional
        (setq TeX-auto-save t
              TeX-save-query nil       ; don't prompt for saving the .tex file
              TeX-parse-self t
              TeX-show-compilation nil         ; if `t`, automatically shows compilation log
              LaTeX-babel-hyphen nil ; Disable language-specific hyphen insertion.
              ;; `"` expands into csquotes macros (for this to work, babel pkg must be loaded after csquotes pkg).
              LaTeX-csquotes-close-quote "}"
              LaTeX-csquotes-open-quote "\\enquote{"
              TeX-file-extensions '("Rnw" "rnw" "Snw" "snw" "tex" "sty" "cls" "ltx" "texi" "texinfo" "dtx"))

        (add-to-list 'TeX-command-list
                     '("Makeglossaries" "makeglossaries %s" TeX-run-command nil
                       (latex-mode)
                       :help "Run makeglossaries script, which will choose xindy or makeindex") t)

        ;; Font-lock for AuCTeX
        ;; Note: '«' and '»' is by pressing 'C-x 8 <' and 'C-x 8 >', respectively
        (font-lock-add-keywords 'latex-mode (list (list "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)" '(1 'font-latex-string-face t) '(2 'font-latex-string-face t) '(3 'font-latex-string-face t))))
        ;; Add standard Sweave file extensions to the list of files recognized  by AuCTeX.
        (add-hook 'LaTex-mode-hook (lambda ()
                                     (load "preview-latex.el" nil t t)
                                     (reftex-isearch-minor-mode)
                                     (turn-on-reftex))))
    #+end_src

** company
   #+begin_src emacs-lisp
     (use-package company-math
       :ensure t
       :config
       (add-hook 'LaTeX-mode-hook (lambda ()
                                    (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-latex))
                                    (setq-local company-backends (add-to-list 'company-backends 'company-latex-commands))
                                    (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-unicode))))
       (add-hook 'org-mode-hook (lambda ()
                                  (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-unicode))
                                  (setq-local company-backends (add-to-list 'company-backends 'company-latex-commands)))))
   #+end_src

   #+RESULTS:
   : t

** indentation
   #+begin_src emacs-lisp
     (eval-after-load 'tex
       '(setq LaTeX-indent-environment-list
              '(("itemize" LaTeX-indent-tabular)
                ("enumerate" LaTeX-indent-tabular)
                ("verbatim" current-indentation)
                ("verbatim*" current-indentation)
                ("tabular" LaTeX-indent-tabular)
                ("tabular*" LaTeX-indent-tabular)
                ("align" LaTeX-indent-tabular)
                ("align*" LaTeX-indent-tabular)
                ("array" LaTeX-indent-tabular)
                ("eqnarray" LaTeX-indent-tabular)
                ("eqnarray*" LaTeX-indent-tabular)
                ("multline" LaTeX-indent-tabular)
                ("displaymath")
                ("equation")
                ("equation*")
                ("picture")
                ("tabbing"))))
   #+end_src

** bindings
   #+begin_src emacs-lisp
     (eval-after-load 'tex
       '(progn
          (defun save-compile-latex ()
            "Save and compile latex document"
            (interactive)
            (save-buffer)
            (TeX-command-sequence t t))

          (defun complete-if-no-space ()
            (interactive)
            (let ((cb (string (char-before))))
              (if (or (equal cb " ") (equal (point) (line-beginning-position)))
                  (tab-to-tab-stop)
                (TeX-complete-symbol))))

          (add-hook 'LaTeX-mode-hook (lambda ()
                                       (define-key LaTeX-mode-map (kbd "<f5>") 'save-compile-latex)
                                       (define-key LaTeX-mode-map (kbd "<f7>") 'preview-clearout-buffer)
                                       (define-key LaTeX-mode-map (kbd "TAB") 'complete-if-no-space)
                                       (define-key LaTeX-mode-map (kbd "<tab>") 'complete-if-no-space)))))
   #+end_src

** preview
   #+begin_src emacs-lisp
     (eval-after-load 'preview
       '(progn
          (set-default 'preview-scale-function 1.7)
          (set-default 'preview-default-option-list
                       '("displaymath" "floats" "graphics" "textmath"))))
   #+end_src

** test output
   - latex code block
     #+begin_src latex
       Integral $\int_{a}^{b} x^2 dx$ inside text
     #+end_src
** Reference
   - [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][LaTex Source Code Blocks in Org Mode]]
   - [[http://www.stat.rice.edu/~helpdesk/compguide/node39.html][Latex/Emacs tex mode]]
