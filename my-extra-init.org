* Other Programming

** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :defer 1
       :ensure t
       :diminish yas-minor-mode
       :config (yas-global-mode t))
   #+end_src

   #+RESULTS:
   : t

** Scala programming
*** ensime
    # #+begin_src emacs-lisp
    #   (use-package ensime
    #     :defer t
    #     :mode "\\.scala\\'"
    #     :init 
    #     (if (string-equal system-type "windows-nt")
    #         (progn
    #           (setq exec-path (append exec-path '("c:/Program Files (x86)/scala/bin")))
    #           (setq exec-path (append exec-path '("c:/Program Files (x86)/sbt/bin"))))
    #       (setq exec-path (append exec-path '("/usr/local/bin"))))
    #     :ensure t
    #     :config
    #     (progn
    #       ;; (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
    #       (add-hook 'scala-mode-hook 'ensime-mode)))
    # #+end_src

    #+RESULTS:
    : t
    
** Python development
*** with lsp 
    - References
      - [[https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/][Configuring Emacs, lsp-mode and Microsoft's Visual Studio Code Python language server.]] (using)
    - Components
      - server: Microsoft Python Language Server
      - client: lsp-python-ms
      - installation
        - install [[https://dotnet.microsoft.com/download][dotnet-sdk]]
          - [[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current][installation on ubuntu18.04]]
        - clone and install [[https://github.com/Microsoft/python-language-server][python-language-server]]
          - Configuration with emacs
            #+begin_src emacs-lisp
              (use-package lsp-python-ms
                :defer t
                :init 
                (setq python-shell-interpreter "python3")
                (setq lsp-python-ms-dir
                      (expand-file-name "~/python-language-server/output/bin/Release/"))
                (setq lsp-python-ms-executable
                      "~/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer")
                (add-hook 'python-mode-hook 'lsp-mode)
                ;; (add-hook 'python-mode-hook #'smartparens-mode)
                :ensure t)
            #+end_src

            #+RESULTS:
            : t



*** Debugging
    Debugg using pdb
    #+BEGIN_SRC python
      # import ipd
      # ipdb.set_trace ()
    #+END_SRC

*** Test Integration
    Configure your test Runner
    M-x elpy-set-test-runner
    C-c C-t  ;; runs test/ all tests

** C/C++ programming
*** with lsp
    - Components
      - install clang: =sudo apt install clang=
      - install clangd: [[https://clang.llvm.org/extra/clangd/Installation.html#installing-clangd][Getting started with clangd]]
      - Configuration with emacs
	#+begin_src emacs-lisp
          (use-package cquery
            :defer t
            :init
            (setq cquery-executable "/usr/local/bin/cquery")
            (setq cquery-extra-init-params '(:completion (:detailedLabel t)))
            (defun cquery//enable ()
              (condition-case nil
                  (lsp)
                (user-error nil)))
            (add-hook 'c-mode-common-hook
                      (lambda ()
                        (when (derived-mode-p 'c-mode 'c++-mode)
                          (ggtags-mode 1)
                          (cquery//enable))))
            :ensure t)
	#+end_src

	#+RESULTS:
	: t

*** CMakeLists
    #+begin_src emacs-lisp
      (use-package cmake-mode
        :defer t
        :init 
        (add-hook 'cmake-mode-hook #'(lambda ()
                                       ;; (smartparens-mode +1)
                                       ))
        :ensure t)
    #+end_src

** Javascript
   #+begin_src emacs-lisp
     (use-package js2-mode
       :defer t
       :init
       :ensure t
       :config
       (progn
         (setq-default js2-bounce-indent-p nil)
         (setq-default js-indent-level 2)
         ;; In Emacs >= 25, the following is an alias for js-indent-level anyway
         (setq-default js2-basic-offset 2)))

     (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
     (add-to-list 'auto-mode-alist '("\\.\\(js\\|es6\\)\\(\\.erb\\)?\\'" . js2-mode))
     ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
     (add-to-list 'interpreter-mode-alist '("node" . js2-mode))

     (defun zw/use-lsp-javascript ()
       "Use lsp for javascript backend"
       (progn
         (add-hook 'js2-mode-hook '(lambda ()
                                     (lsp-mode t)
                                     (lsp)
                                     (define-key js2-mode-map (kbd "M-.") 'lsp-ui-peek-find-definitions)
                                     (define-key js2-mode-map (kbd "M-/") 'lsp-treemacs-references)))))

     (defun zw/use-tern-javascript ()
       "Use tern as javascript backend"
       (progn
         ;; define how to find definitions and references
         (when (and (executable-find "ag")
                    (maybe-require-package 'xref-js2))
           (after-load 'js2-mode
             (define-key js2-mode-map (kbd "M-.") nil)
             (add-hook 'js2-mode-hook
                       (lambda () (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))))

         (use-package company-tern
           :defer t
           :after (company tern)
           :commands (company-tern)
           :ensure t
           :init 
           (setq tern-command (append tern-command '("--no-port-file"))))

         (use-package tern
           :ensure t
           :defer t)
         (add-hook 'js-mode-hook 
                   '(lambda ()
                      (setq-local company-backends (add-to-list 'company-backends 'company-tern))
                      (tern-mode)))))

     ;; switch different backend
     (if (version<= emacs-version "27.0")
         (zw/use-tern-javascript)
       (zw/use-lsp-javascript))

     (after-load 'js2-mode
       ;; Disable js2 mode's syntax error highlighting by default...
       (setq-default js2-mode-show-parse-errors nil
                     js2-mode-show-strict-warnings nil)
       ;; ... but enable it if flycheck can't handle javascript
       (autoload 'flycheck-get-checker-for-buffer "flycheck")
       (defun sanityinc/enable-js2-checks-if-flycheck-inactive ()
         (unless (flycheck-get-checker-for-buffer)
           (setq-local js2-mode-show-parse-errors t)
           (setq-local js2-mode-show-strict-warnings t)))
       (add-hook 'js2-mode-hook 'sanityinc/enable-js2-checks-if-flycheck-inactive)
       (add-hook 'js2-mode-hook (lambda () (setq mode-name "JS2")))
       (js2-imenu-extras-setup))

     (when (maybe-require-package 'add-node-modules-path)
       (after-load 'typescript-mode
         (add-hook 'typescript-mode-hook 'add-node-modules-path))
       (after-load 'js2-mode
         (add-hook 'js2-mode-hook 'add-node-modules-path)))
   #+end_src
   - flow-based autocomplete for emacs with [[https://github.com/aaronjensen/company-flow][company-flow]], need to install [[https://github.com/facebook/flow][flow]]
   - Tern is a stand-alone code-analysis engine for JavaScript, need to install: ~sudo npm install -g tern~.

** Web/Javascript programming
*** Web-mode for vue.js 
    #+BEGIN_SRC emacs-lisp
      (defun my/web-vue-setup()
        "Setup for js related."
        (message "web-mode use vue related setup")
        (require 'company-css)
        (setq-local company-backends (append '(company-web-html company-css) company-backends))
        (setq-local company-backends (add-to-list 'company-backends 'company-tern))
        (tern-mode)
        (flycheck-add-mode 'javascript-eslint 'web-mode)
        (flycheck-select-checker 'javascript-eslint)
        (my/use-eslint-from-node-modules))

      (use-package web-mode
        :defer t
        :ensure t
        :mode ("\\.html\\'" "\\.vue\\'")
        :config
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-enable-css-colorization t)
        ;; (set-face-attribute 'web-mode-html-tag-face nil :foreground "royalblue")
        ;; (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "powderblue")
        ;; (set-face-attribute 'web-mode-doctype-face nil :foreground "lightskyblue")
        (setq web-mode-content-types-alist
              '(("vue" . "\\.vue\\'")))

        (add-hook 'web-mode-hook (lambda()
                                   (cond ((equal web-mode-content-type "html")
                                          ;; TODO: implement my/web-html-setup for html properly
                                          ;; (my/web-html-setup)
                                          (my/web-vue-setup))
                                         ((member web-mode-content-type '("vue"))
                                          (my/web-vue-setup))))))

      (use-package emmet-mode
        :ensure t
        :defer t
        :config
        (progn
          (add-hook 'web-mode-hook  'emmet-mode)))

      (use-package company-web
        :commands (web-mode)
        :defer t 
        :after (company web-mode)
        :ensure t)

      (defun my/use-eslint-from-node-modules ()
        "Use local eslint from node_modules before global."
        (let* ((root (locate-dominating-file
                      (or (buffer-file-name) default-directory)
                      "node_modules"))
               (eslint (and root
                            (expand-file-name "node_modules/eslint/bin/eslint.js"
                                              root))))
          (when (and eslint (file-executable-p eslint))
            (setq-local flycheck-javascript-eslint-executable eslint))))
      (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
    #+END_SRC

    #+RESULTS:
    | my/use-eslint-from-node-modules | flycheck-yamllint-setup | flycheck-mode-set-explicitly |

*** References    
    #+begin_example
      I am the best person to answer this question. If you are the js developer using Emacs, you are already running Emacs Lisp code written by me.

      Now answer you question:

      for project tree view. neotree is very popular. But advanced user don’t bother using file explorer, they just fuzzy search file in project. For file searching, most users use projectile. But I highly recommend find-file-in-project. It’s quick, easy to setup (no setup for most projects actually). find-file-in-project is endorsed by guys who developed elpy/hydra/swiper/ace-window/lispy/avy.
      lint is done automatically by js2-mode, no setup needed. Extra tip, you may need tweak `js2-additional-externs` in `js2-post-parse-callbacks` when working on large legacy project.
      I use mozrepl to refresh the firefox. I know all the related Emacs plugins. But I’ve made my choice to stick to mozrepl. For local http server, you can use simple-httpd. Firefox plugin keysnail make me 1000% faster on web development.
      for code completion, you need install company-mode, you may need setup backend tern (if you use company-tern) or ctags (if you use company-etags). I prefer ctags way.
      Extra tips:

      If you use js2-mode, you’d better enable js2-imenu-extras-mode, then `M-x helm-imenu` (if you install helm) or `M-x counsel-imenu` (if you install counsel)

      In js2-mode, you can also `M-x js2-print-json-path`
    #+end_example

** go programming
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

     (use-package go-mode
       :defer t
       :init 
       (if (string-equal system-type "gnu/linux")
           (add-to-list 'exec-path "/usr/local/go/bin")
         nil)
       :ensure t)

     (use-package ob-go
       :defer 2 
       :ensure t
       :config
       (add-to-list 'org-structure-template-alist '("go" . "src go"))
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((go . t))))

     (defun zw/lsp-go-steup ()
       (setq lsp-gopls-use-placeholders t)
       (lsp-register-custom-settings
        '(("gopls.completeUnimported" t t)
          ("gopls.staticcheck" t t)))
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))

     (add-hook 'go-mode-hook '(lambda ()
                                (lsp-mode t)
                                (lsp)
                                #'zw/lsp-go-steup))
   #+end_src
   - lsp should work with [[https://github.com/golang/tools/blob/master/gopls/README.md][gopls]]
     - install it by ~go get golang.org/x/tools/gopls@latest~
   - go-mode with ob-go
   - Test go example
     #+begin_src go :imports "fmt"
       fmt.Println("Hello, 世界")
     #+end_src

     #+RESULTS:
     : Hello, 世界

** Java programming
   [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][blog shows how to setup emacs for java development]]
   
* R programming
** configuration 
   #+begin_src emacs-lisp
     (use-package electric-spacing
       :after (ess)
       :defer t
       :ensure t)

     (use-package ess
       :defer t
       :ensure t
       :init 
       (require 'ess-site)
       (cond ((eq system-type 'darwin)
              (setq inferior-ess-r-program "/usr/local/bin/R"))
             ((eq system-type 'gnu/linux)
              (setq inferior-ess-r-program "/usr/local/bin/R"))
             ((eq system-type 'windows-nt)
              ;; you may also need to add execution path to windows system environment
              (setq exec-path (append exec-path '("C:/tools/R/R-3.6.2/bin")))
              (setq inferior-ess-r-program "C:/tools/R/R-3.6.2/bin/R.exe")))
       (setq comint-input-ring-size 1000
             ess-indent-level 4
             ess-arg-function-offset 4
             ess-else-offset 4
             ess-continued-statement-offset 2
             truncate-lines t
             comment-column 4)		
       (add-hook 'ess-mode-hook 
                 '(lambda () 
                    (electric-spacing-mode))))
   #+end_src


** references
   - [[https://jmonlong.github.io/Hippocamplus/emacs/#for-r]]

* Org mode enhancement
** common settings
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :init
       (setq org-link-file-path-type 'adaptive)
       :defer t
       :ensure org-plus-contrib)

     ;; To bind a key in a mode, you need to wait for the mode to be loaded before defining the key.
     (eval-after-load 'org
       #'(lambda ()
           (require 'ob)
           (require 'ob-js)
           (require 'org-eldoc)
           (require 'org-tempo)
      
           (global-set-key (kbd "<f12>") (kbd "C-c '"))
           (define-key org-mode-map [f5] #'org-toggle-inline-images)
           (define-key org-mode-map [f11] #'org-toggle-narrow-to-subtree)))

     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)

     (add-hook 'org-mode-hook '(lambda ()
                                 ;; set org to user the current window when edit src code
                                 (setq org-src-window-setup 'current-window)
                                 (setq org-log-done t)))
   #+END_SRC

** org-agenda-files
   In case some org files is not listed in agenda files, run the code block again to refresh the file list.
   Another way is to invoke the function ~org-agenda-file-to-front~.
   #+begin_src emacs-lisp
     ;; make org-agenda to search all the TODOs recursively for files .org in folder "~/code/org/"
     (setq org-agenda-files (directory-files-recursively "~/code/capture-org/" "\\.org$"))
   #+end_src

** make code-block could be executed in org-mode
   #+begin_src emacs-lisp
     ;; evaluation lisp using sly instead of slime, need to use org-plus-contrib
     (setq org-babel-lisp-eval-fn #'sly-eval)

     ;; http request in org-mode babel, requires curl
     (use-package ob-http
       :after (org)
       :defer t
       :ensure t)

     ;; since yaml mode is not supported by org, create the command yourself
     (defun org-babel-execute:yaml (body params) body)
     (defun org-babel-execute:json (body params) body)
     (defun org-babel-execute:terraform (body params) body)

     (add-hook 'org-mode-hook #'(lambda ()
                                  (progn
                                    ;; all languages needed to be confirmed to execute except:
                                    (defun my-org-confirm-babel-evaluate (lang body)
                                      (not (member lang '("emacs-lisp" "lisp" "scheme" "clojure" "python" "R" "C" "latex" "dot" "plantuml"))))
                                    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate))))

     (eval-after-load 'org
       #'(lambda ()
           (org-babel-do-load-languages
            'org-babel-load-languages
            '((emacs-lisp . t)
              (lisp . t)
              (clojure . t)
              (scheme . t)
              (C . t)
              (shell . t)
              (js . t)
              (python . t)
              (R . t)
              (http . t)
              (latex . t)
              (dot . t)
              (plantuml . t)))
           (add-to-list 'org-structure-template-alist '("py3" . "src python3"))
           (add-to-list 'org-structure-template-alist '("py" . "src python"))
           (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
           (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
           (add-to-list 'org-structure-template-alist '("scheme" . "src scheme"))
           (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
           (add-to-list 'org-structure-template-alist '("clojure" . "src clojure"))
           (add-to-list 'org-structure-template-alist '("r" . "src R"))
           (add-to-list 'org-structure-template-alist '("js" . "src js"))
           (add-to-list 'org-structure-template-alist '("http" . "src http"))
           (add-to-list 'org-structure-template-alist '("lt" . "LaTeX"))
           (add-to-list 'org-structure-template-alist '("dot" . "src dot :cmdline -Kdot -Tpng"))
           (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
           (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
           (add-to-list 'org-structure-template-alist '("json" . "src json"))
           (add-to-list 'org-structure-template-alist '("terraform" . "src terraform"))
           (add-to-list 'org-structure-template-alist '("uml" . "src plantuml"))
           (add-to-list 'org-structure-template-alist '("latex" . "src latex"))))
   #+end_src

** align org tags
   #+begin_src emacs-lisp
     ;; (add-hook 'window-configuration-change-hook
     ;; 	  (lambda () (progn 
     ;; 		  (setq org-tags-column (- 7 (window-body-width)))
     ;; 		  (org-align-all-tags))))
   #+end_src

** Publishing Org-mode files to HTML
   #+begin_src emacs-lisp
     (use-package htmlize
       :defer 2
       :ensure t)

     ;; publish the ~/code/org/ project to HTML
     (require 'ox-publish)
     (setq org-publish-project-alist
	   '(;; the netes components, it publishes all the org-mode files to HTML 
	     ("org-notes"
	      :base-directory "~/code/org/"
	      :base-extension "org"
	      :publishing-directory "~/code/public_html/"
	      :recursive t
	      :publishing-function org-html-publish-to-html
	      :headline-levels 4
	      :auto-preamble t
	      :auto-sitemap t                  
	      :sitemap-filename "sitemap.org"  
	      :sitemap-title "Sitemap")
	     ("org-static"
	      :base-directory "~/code/org/"
	      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	      :publishing-directory "~/public_html/"
	      :recursive t
	      :publishing-function org-publish-attachment)
	     ("org" :components ("org-notes" "org-static"))
	
	     ("hugo-notes"
	      :base-directory "~/code/org/"
	      :base-extension "org"
	      :publishing-directory "~/code/my-site/content-org/"
	      :recursive t)))

   #+end_src

   #+RESULTS:

** Hugo + ox-hugo + Netlify
*** ox-hugo
    #+begin_src emacs-lisp
      (use-package ox-hugo
        :ensure t)
    #+end_src

    #+RESULTS:

*** org-capture
    * create corresponding .org file within the org folder inside HUGO site
    * each note/post will be inserted into the corresponding org file under second level headline (the first level is the corresponding file headline)
    * edit config/menus.toml, create link to section
    * edit content/home/<corresponding url name>.md, use computer-science.md as example:
      * line 3: # This section displays recent blog posts from `content/computer-science/`.
      * title = "Computer Science Posts"
      * line 15: page_type = "computer-science"
    * Note: need to mark the second level headline status as DONE to make it be visiable and searchable after being published.
    
    configuration for ~org-capture~
    #+begin_src emacs-lisp
      (defun org-hugo-new-subtree-post-capture-template ()
        "Returns `org-capture' template string for new Hugo post.
      See `org-capture-templates' for more information."
        (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
               (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
               (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
               (fname (org-hugo-slug title)))
          (mapconcat #'identity
                     `(
                       ,(concat "* TODO " title)
                       ":PROPERTIES:"
                       ,(concat ":EXPORT_FILE_NAME: " fname)
                       ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                       ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: "  ":weight 10 :autoCollapseToc true :mathjax true :contentCopyright MIT :author \"Z wei\"")
                       ":END:"
                       "%?\n")          ;Place th
                     "\n")))

      (defvar hugo-org-path "~/code/capture-org/"
        "define the place where we put our org files for hugo")
      (defvar org-capture-todo (concat hugo-org-path "todo.org"))
      (defvar org-capture-computer-science (concat hugo-org-path "computer-science.org"))
      (defvar org-capture-emacs (concat hugo-org-path "emacs.org"))
      (defvar org-capture-math (concat hugo-org-path "mathematics.org"))
      (defvar org-capture-software (concat hugo-org-path "software-engineering.org"))
      (defvar org-capture-tools (concat hugo-org-path "tools.org"))
      (defvar org-capture-work (concat hugo-org-path "work-notes.org"))
      (defvar org-capture-test (concat hugo-org-path "test.org"))
      ;; (defvar hugo-capture-orgs
      ;;   (list
      ;;    (cons 'computer (concat hugo-org-path "computer-science.org"))
      ;;    (cons 'emacs (concat hugo-org-path "emacs.org"))
      ;;    (cons 'math (concat hugo-org-path "mathematics.org"))
      ;;    (cons 'software (concat hugo-org-path "software-engineering.org"))
      ;;    (cons 'tools (concat hugo-org-path "tools.org"))
      ;;    (cons 'work (concat hugo-org-path "work-notes.org"))))

      (setq org-export-with-author nil)
      (setq org-capture-templates
            '(
              ("t" "todo" entry (file org-capture-todo)
               "* TODO %? :TODO: \n Added:%T\n"
               :clock-in t :clock-resume t)

              ;; ("ht" "test" entry (file org-capture-test)
              ;;  (function org-hugo-new-subtree-post-capture-template)
              ;;  :clock-in t :clock-resume t)

              ("h" "Hugo post")
        
              ;; ("hc" "Computer-Science"
              ;;  entry (file+olp org-capture-computer-science "Computer-Science")
              ;;  (function org-hugo-new-subtree-post-capture-template)
              ;;  :clock-in t :clock-resume t)
              ("hc" "Computer-Science"
               entry (file org-capture-computer-science)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)

              ("he" "Emacs"
               entry (file org-capture-emacs)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)

              ("hm" "Mathematics"
               entry (file org-capture-math)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)

              ("hs" "Software-Engineering"
               entry (file org-capture-software)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)

              ("ht" "Tools"
               ;; entry (file+olp org-capture-tools "Tools")
               entry (file org-capture-tools)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)

              ("hw" "Work-Notes"
               entry (file org-capture-work)
               (function org-hugo-new-subtree-post-capture-template)
               :clock-in t :clock-resume t)))
    #+end_src

    #+RESULTS:
    | t | todo | entry | (file ~/code/my-site/org/todo.org) | * TODO %? :TODO: |

** Set the background of org-exported <code> blocks according to theme
   #+begin_src emacs-lisp
     (defun my/org-inline-css-hook (exporter)
       "Insert custom inline css to automatically set the
     background of code to whatever theme I'm using's background"
       (when (eq exporter 'html)
	 (let* ((my-pre-bg (face-background 'default))
		(my-pre-fg (face-foreground 'default)))
	   (setq
	    org-html-head-extra
	    (concat
	     org-html-head-extra
	     (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
		     my-pre-bg my-pre-fg))))))

     (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
   #+end_src

   #+RESULTS:
   | my/org-inline-css-hook |

** Github Flavored Markdown
   #+begin_src emacs-lisp
     (use-package ox-gfm
       :defer t
       :ensure t
       :config
       (progn
         (eval-after-load "org"
           '(require 'ox-gfm nil t))))
   #+end_src

** Capture screenshot within Emacs
   #+begin_src emacs-lisp
     (use-package org-attach-screenshot
       :commands (org-mode)
       :ensure t
       :config
       (progn
         (setq org-attach-screenshot-dirfunction
               (lambda () 
                 (progn (assert (buffer-file-name))
                        (concat (file-name-sans-extension (buffer-file-name))
                                "_att")))
               org-attach-screenshot-relative-links t)))

     (defun zw/org-screenshot ()
       "Take a screenshot into a time stamped unique-named file in the
     same directory as the org-buffer and insert a link to this file."
       (interactive)
       (setq filename
             (concat
              (make-temp-name
               (concat (file-name-directory buffer-file-name)
                       "_"
                       (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
       (shell-command "snippingtool /clip")
       (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('" filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
       (insert (concat "[[file:" filename "]]"))
       (org-display-inline-images))

     ;; (global-set-key "\C-cs" 'zw/org-screenshot)
     (if (string-equal system-type "windows-nt")
         (define-key org-mode-map (kbd "\C-c s") 'zw/org-screenshot)
       (define-key org-mode-map (kbd "\C-c s") 'org-attach-screenshot))
   #+end_src

** Org-download moving images from A to B
   #+begin_src emacs-lisp
     (use-package org-download
       :commands (org-mode)
       :ensure t
       :config
       (progn
         (add-hook 'dired-mode-hook 'org-download-enable)))
   #+end_src

   #+RESULTS:
   : t

** graphviz
   #+begin_src emacs-lisp
     ;; sudo apt install graphviz
     (use-package graphviz-dot-mode
       :commands (graphviz-dot-mode)
       :ensure t
       :init
       (setq graphviz-dot-indent-width 4)
       ;; :config 
       ;; (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))
       )
   #+end_src

   #+RESULTS:

   - [[https://anthonyskelton.com/2015/graphviz-a-better-way-to-create-flow-charts/][graphviz example01]]
   - [[http://melp.nl/2013/08/flow-charts-in-code-enter-graphviz-and-the-dot-language/][graphviz example02]]

** plantuml
   #+begin_src emacs-lisp
     (use-package plantuml-mode
       :commands (plantuml-mode)
       :ensure t
       :config
       (progn
         (setq plantuml-default-exec-mode 'jar)
         (setq plantuml-jar-path "~/.emacs.d/plantuml.jar")
         (setq plantuml-output-type "svg")
         ;; needed by ob-plantuml.el
         (setq org-plantuml-jar-path "~/.emacs.d/plantuml.jar")
         (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
         (add-hook 'plantuml-mode-hook '(lambda ()
                                          ;; (smartparens-mode)
                                          (setq-local company-backends (add-to-list 'company-backends 'plantuml-complete-symbol))))))
   #+end_src

   #+RESULTS:
   : t
   
* Markdown 
  - sudo apt install pandoc
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC

  #+RESULTS:

* JSON-mode
  #+begin_src emacs-lisp
    (use-package json-mode
      :defer t
      :ensure t
      :config
      (progn
        (add-hook 'json-mode-hook
                  #'(lambda ()
                      (remove-hook 'before-save-hook #'clang-format-buffer-smart 'local)))))
  #+end_src
* Docker
  #+begin_src emacs-lisp
    ;; reference usage from http://manuel-uberti.github.io/emacs/2017/10/19/docker/
    (use-package dockerfile-mode
      :defer t
      :ensure t
      :init 
      (setq dockerfile-mode-command "docker"))
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))

    (use-package docker-compose-mode
      :after (dockerfile-mode)
      :defer t
      :ensure t)

    (use-package docker-tramp
      ;; C-x C-f /docker:user@container:/path/to/file, where:
      ;; user is the user that you want to use
      ;; container is the id or name of the container 
      :defer t
      :ensure t
      :after (dockerfile-mode))

    (use-package eshell-bookmark
      :defer t 
      :after eshell
      :config 
      (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
  #+end_src

  #+RESULTS:

* PDF 
  * Use [[https://github.com/politza/pdf-tools][pdf-tools]], read the documentation to install dependencies according to your system.
  * Dependencies on Ubuntu
    #+begin_src sh
      sudo apt install autoconf automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config
    #+end_src
  * Configuration 
  #+begin_src emacs-lisp
    ;; (unless (string-equal system-type "windows-nt")
    ;;   ;; Haven't build pdf-tool dependencies on other system
    ;;   (use-package pdf-tools
    ;;     ;; :pin manual
    ;;     :init
    ;;     (use-package tablist
    ;;       :ensure t)
    ;;     :ensure t
    ;;     :config
    ;;     ;; initialise
    ;;     (pdf-tools-install)
    ;;     ;; PDF Tools does not work well together with linum-mode
    ;;     (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
    ;;     ;; more fine-grained zooming
    ;;     ;; (setq pdf-view-resize-factor 1.1)
    ;;     ;; open pdfs scaled to fit page
    ;;     (setq-default pdf-view-display-size 'fit-width)
    ;;     ;; automatically annotate highlights
    ;;     (setq pdf-annot-activate-created-annotations t)

    ;;     ;; use normal isearch
    ;;     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

    ;;   (use-package org-pdfview
    ;;     :ensure t))
  #+end_src

  #+RESULTS:

  * If meet error: "dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.4.dylib Referenced from: /usr/local/bin/gawk" during the compliation of pdf-tools.
    Solution: ~brew upgrade gawk~

* highlight-symbol
  # #+begin_src emacs-lisp
  #   (use-package idle-highlight-mode
  #     :defer 2
  #     :ensure t
  #     :init 
  #     (define-globalized-minor-mode my-global-idle-highlight-mode idle-highlight-mode
  #       (lambda ()
  #         (idle-highlight-mode 1)))
  #     (my-global-idle-highlight-mode 1))
  # #+end_src
* Folding
  * [[https://github.com/gregsexton/origami.el][Origami]]
  * [[https://github.com/zenozeng/yafolding.el][yafolding ]]
  * [[https://github.com/mrkkrp/vimish-fold][vimish-fold]]
  #+begin_src emacs-lisp
    (use-package yafolding
      :defer t
      :init (global-set-key (kbd "<f9>") 'yafolding-toggle-element)
      :commands (yafolding-toggle-element)
      :ensure t)
  #+end_src

  #+RESULTS:
  : t

* Indentation
** indent guide
*** Refs   
    * [[https://github.com/antonj/Highlight-Indentation-for-Emacs][Highlight-Indentation-for-Emacs]]
    * [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]
    * [[https://github.com/zk-phi/indent-guide][indent-guide]]
*** highlight-indent-guides
    #+begin_src emacs-lisp
      (use-package highlight-indent-guides
        :ensure t
        :config 
        (progn
          (setq highlight-indent-guides-delay 0.1)
          ;; (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
          ;; (add-hook 'plantuml-mode-hook 'highlight-indent-guides-mode)
          (add-hook 'json-mode-hook 'highlight-indent-guides-mode)
          (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)))
    #+end_src

*** indent-guide
    #+begin_src emacs-lisp
      ;; (use-package indent-guide
      ;;   :ensure t
      ;;   :config
      ;;   (progn
      ;;     (setq indent-guide-delay 0.1)
      ;;     (add-hook 'prog-mode-hook 'indent-guide-mode)))
    #+end_src

** indentation using tab/space
   #+begin_src emacs-lisp
     ;; START TABS CONFIG
     ;; Create a variable for our preferred tab width
     (setq custom-indent-width 2)

     ;; Two callable functions for enabling/disabling tabs in Emacs
     (defun disable-tabs () 
       (progn
         (setq-default indent-tabs-mode nil)
         (setq indent-tabs-mode nil)))

     (defun enable-tabs  ()
       (progn
         ;; (local-set-key (kbd "TAB") 'tab-to-tab-stop)
         (setq-default tab-width custom-indent-width)
         (setq tab-width custom-indent-width)
         (setq indent-tabs-mode t)))

     (add-hook 'after-init-hook '(lambda ()
                                   ;; Hooks to Enable Tabs
                                   ;; (add-hook 'prog-mode-hook 'enable-tabs)
                                   ;; (add-hook 'org-mode-hook 'enable-tabs)
                                   (add-hook 'plantuml-mode-hook '(lambda ()
                                                                    ;; plantuml seems always use tabs to do indent format
                                                                    (enable-tabs)
                                                                    (setq plantuml-indent-level custom-indent-width)))

                                   ;; Hooks to Disable Tabs, since tab usually cause inconsistent visual appearence
                                   (add-hook 'prog-mode-hook 'disable-tabs)
                                   (add-hook 'org-mode-hook 'disable-tabs)
                                   (add-hook 'json-mode-hook 'disable-tabs)
                                   (add-hook 'lisp-mode-hook 'disable-tabs)
                                   (add-hook 'emacs-lisp-mode-hook 'disable-tabs)
                                   (add-hook 'yaml-mode-hook 'disable-tabs)

                                   ;; Language-Specific Tweaks
                                   (add-hook 'python-mode-hook '(lambda ()
                                                                  (setq-default python-indent-offset custom-indent-width)
                                                                  (setq python-indent-offset custom-indent-width)))))

     ;; (setq-default js-indent-level custom-indent-width)      ;; Javascript

     ;; Making electric-indent behave sanely
     (setq-default electric-indent-inhibit nil)

     ;; Make the backspace properly erase the tab instead of
     ;; removing 1 space at a time.
     (setq backward-delete-char-untabify-method 'hungry)

     ;; ;; WARNING: This will change your life
     ;; ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
     ;; ;; This will also show trailing characters as they are useful to spot.
     ;; (setq whitespace-style '(face tabs tab-mark trailing))
     ;; (custom-set-faces
     ;;  '(whitespace-tab ((t (:foreground "#636363")))))
     ;; (setq whitespace-display-mappings
     ;;   '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
     ;; (global-whitespace-mode) ; Enable whitespace mode everywhere

     ;; END TABS CONFIG
   #+end_src

   #+RESULTS:
   : hungry

* Lookup word definition
  * Ref: (see [[https://oremacs.com/2015/05/22/define-word/][New on MELPA - define word at point]])
  
* Hydra
  #+begin_src emacs-lisp
    (use-package hydra
      :ensure t
      :defer t)
  #+end_src

* Unpackaged
A collection of useful Emacs Lisp code that isn’t substantial enough to be packaged. This code will be maintained here so that it can be updated and improved over time.

** Mark current package for upgrading
   #+begin_src emacs-lisp
      (use-package package
        :bind (:map package-menu-mode-map
                    ("t" . #'package-menu-upgrade-package))
        :config
        (defun package-menu-upgrade-package ()
          "Mark current package for upgrading (i.e. also mark obsolete version for deletion.)"
          (interactive)
          (when-let ((upgrades (package-menu--find-upgrades))
                     (description (tabulated-list-get-id))
                     (name (package-desc-name description))
                     (upgradable (cdr (assq name upgrades))))
            ;; Package is upgradable
            (save-excursion
              (goto-char (point-min))
              (while (not (eobp))
                (let* ((current-description (tabulated-list-get-id))
                       (current-name (package-desc-name current-description)))
                  (when (equal current-name name)
                    (cond ((equal description current-description)
                           (package-menu-mark-install)
                           (forward-line -1))
                          (t (package-menu-mark-delete)))))
                (forward-line 1))))))
   #+end_src

** Smerge with hydra 
   #+begin_src emacs-lisp
     (use-package smerge-mode
       :after hydra
       :init 
       (setq smerge-command-prefix "\C-cv")
       :config
       (defhydra unpackaged/smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (unpackaged/smerge-hydra/body)))))
     (defun magit-hydra/zw ()
       (interactive)
       (unpackaged/smerge-hydra/body))
   #+end_src
   - You can manually activate the hydra with the command ~unpackaged/smerge-hydra/body~.
* Sudo-edit
  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t
      :defer 1)
  #+end_src
* Nyan
  #+begin_src emacs-lisp
    (use-package nyan-mode
      :ensure t
      :config
      (nyan-mode 1)
      (setq nyan-cat-face-number 3))
  #+end_src

  #+RESULTS:
  : t

* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-items '((recents . 10)
                              (projects . 5))))
  #+end_src

* Latex
** setup
    #+begin_src emacs-lisp
      (use-package auctex
        :ensure t
        :defer t
        :mode ("\\.tex\\'" . LaTex-mode)
        :bind (:map LaTeX-mode-map
                    ("M-<delete>" . TeX-remove-macro)
                    ("C-c C-r" . reftex-query-replace-document)
                    ("C-c C-g" . reftex-grep-document))
        :init
        ;; define texbin execution path based on system
        (cond ((eq system-type 'darwin)
               (setq exec-path (append exec-path '("/Library/TeX/texbin/")))))
        ;; A function to delete the current macro in AUCTeX.
        ;; Note: keybinds won't be added to TeX-mode-hook if not kept at the end of the AUCTeX setup!
        (defun TeX-remove-macro ()
          "Remove current macro and return TRUE, If no macro at point, return Nil."
          (interactive)
          (when (TeX-current-macro)
            (let ((bounds (TeX-find-macro-boundaries))
                  (brace  (save-excursion
                            (goto-char (1- (TeX-find-macro-end)))
                            (TeX-find-opening-brace))))
              (delete-region (1- (cdr bounds)) (cdr bounds))
              (delete-region (car bounds) (1+ brace)))
            t))
        :config
        (setq-default TeX-master nil ; by each new fie AUCTEX will ask for a master fie.
                      TeX-PDF-mode t
                      TeX-engine 'xetex)     ; optional
        (setq TeX-auto-save t
              TeX-save-query nil       ; don't prompt for saving the .tex file
              TeX-parse-self t
              TeX-show-compilation nil         ; if `t`, automatically shows compilation log
              LaTeX-babel-hyphen nil ; Disable language-specific hyphen insertion.
              ;; `"` expands into csquotes macros (for this to work, babel pkg must be loaded after csquotes pkg).
              LaTeX-csquotes-close-quote "}"
              LaTeX-csquotes-open-quote "\\enquote{"
              TeX-file-extensions '("Rnw" "rnw" "Snw" "snw" "tex" "sty" "cls" "ltx" "texi" "texinfo" "dtx"))

        (add-to-list 'TeX-command-list
                     '("Makeglossaries" "makeglossaries %s" TeX-run-command nil
                       (latex-mode)
                       :help "Run makeglossaries script, which will choose xindy or makeindex") t)

        ;; Font-lock for AuCTeX
        ;; Note: '«' and '»' is by pressing 'C-x 8 <' and 'C-x 8 >', respectively
        (font-lock-add-keywords 'latex-mode (list (list "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)" '(1 'font-latex-string-face t) '(2 'font-latex-string-face t) '(3 'font-latex-string-face t))))
        ;; Add standard Sweave file extensions to the list of files recognized  by AuCTeX.
        (add-hook 'LaTex-mode-hook (lambda ()
                                     (load "preview-latex.el" nil t t)
                                     (reftex-isearch-minor-mode)
                                     (turn-on-reftex))))
    #+end_src

** company
   #+begin_src emacs-lisp
     (use-package company-math
       :ensure t
       :config
       (add-hook 'LaTeX-mode-hook (lambda ()
                                    (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-latex))
                                    (setq-local company-backends (add-to-list 'company-backends 'company-latex-commands))
                                    (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-unicode))))
       (add-hook 'org-mode-hook (lambda ()
                                  (setq-local company-backends (add-to-list 'company-backends 'company-math-symbols-unicode))
                                  (setq-local company-backends (add-to-list 'company-backends 'company-latex-commands)))))
   #+end_src

   #+RESULTS:
   : t

** indentation
   #+begin_src emacs-lisp
     (eval-after-load 'tex
       '(setq LaTeX-indent-environment-list
              '(("itemize" LaTeX-indent-tabular)
                ("enumerate" LaTeX-indent-tabular)
                ("verbatim" current-indentation)
                ("verbatim*" current-indentation)
                ("tabular" LaTeX-indent-tabular)
                ("tabular*" LaTeX-indent-tabular)
                ("align" LaTeX-indent-tabular)
                ("align*" LaTeX-indent-tabular)
                ("array" LaTeX-indent-tabular)
                ("eqnarray" LaTeX-indent-tabular)
                ("eqnarray*" LaTeX-indent-tabular)
                ("multline" LaTeX-indent-tabular)
                ("displaymath")
                ("equation")
                ("equation*")
                ("picture")
                ("tabbing"))))
   #+end_src

** bindings
   #+begin_src emacs-lisp
     (eval-after-load 'tex
       '(progn
          (defun save-compile-latex ()
            "Save and compile latex document"
            (interactive)
            (save-buffer)
            (TeX-command-sequence t t))

          (defun complete-if-no-space ()
            (interactive)
            (let ((cb (string (char-before))))
              (if (or (equal cb " ") (equal (point) (line-beginning-position)))
                  (tab-to-tab-stop)
                (TeX-complete-symbol))))

          (add-hook 'LaTeX-mode-hook (lambda ()
                                       (define-key LaTeX-mode-map (kbd "<f5>") 'save-compile-latex)
                                       (define-key LaTeX-mode-map (kbd "<f7>") 'preview-clearout-buffer)
                                       (define-key LaTeX-mode-map (kbd "TAB") 'complete-if-no-space)
                                       (define-key LaTeX-mode-map (kbd "<tab>") 'complete-if-no-space)))))
   #+end_src

** preview
   #+begin_src emacs-lisp
     (eval-after-load 'preview
       '(progn
          (set-default 'preview-scale-function 1.7)
          (set-default 'preview-default-option-list
                       '("displaymath" "floats" "graphics" "textmath"))))
   #+end_src

** test output
   - latex code block
     #+begin_src latex
       Integral $\int_{a}^{b} x^2 dx$ inside text
     #+end_src
** Reference
   - [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][LaTex Source Code Blocks in Org Mode]]
   - [[http://www.stat.rice.edu/~helpdesk/compguide/node39.html][Latex/Emacs tex mode]]
